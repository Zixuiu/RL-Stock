# added by gitignore-cli

# 忽略IDEA项目文件夹
.idea
# 忽略股票数据文件夹
stockdata
# 忽略模型文件夹
model
# 忽略日志文件夹
log
# 忽略VS Code配置文件夹
.vscode/
# 忽略.pkl文件
*.pkl

# 忽略字节编译/优化/DLL文件
__pycache__/
*.py[cod]
*$py.class

# 忽略C扩展文件
*.so

# 忽略分发/打包文件
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
pip-wheel-metadata/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# 忽略PyInstaller相关文件
# 通常这些文件是由Python脚本从模板中生成的，然后由PyInstaller构建exe文件，以注入日期/其他信息。
*.manifest
*.spec

# 忽略安装器日志文件
pip-log.txt
pip-delete-this-directory.txt

# 忽略单元测试/覆盖率报告文件
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# 忽略翻译文件
*.mo
*.pot

# 忽略Django相关文件
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# 忽略Flask相关文件
instance/
.webassets-cache

# 忽略Scrapy相关文件
.scrapy

# 忽略Sphinx文档生成文件
docs/_build/

# 忽略PyBuilder相关文件
.pybuilder/
target/

# 忽略Jupyter Notebook相关文件
.ipynb_checkpoints

# 忽略IPython配置文件
profile_default/
ipython_config.py

# 忽略pyenv相关文件
# 对于库或包，您可能希望忽略这些文件，因为代码旨在在多个环境中运行；否则，可以将它们检入：
# .python-version

# 忽略pipenv相关文件
# 根据pypa/pipenv#598建议，建议将Pipfile.lock包含在版本控制中。
# 但是，在协作的情况下，如果存在特定于平台的依赖项或不支持跨平台的依赖项，pipenv可能会安装不起作用的依赖项或未安装所有所需的依赖项。
#Pipfile.lock

# PEP 582; 例如github.com/David-OConnor/pyflow使用
__pypackages__/

# 忽略Celery相关文件
celerybeat-schedule
celerybeat.pid

# 忽略SageMath解析文件
*.sage.py

# 忽略环境文件夹
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# 忽略Spyder项目设置文件
.spyderproject
.spyproject

# 忽略Rope项目设置文件
.ropeproject

# 忽略mkdocs文档生成文件
/site

# 忽略mypy相关文件
.mypy_cache/
.dmypy.json
dmypy.json

# 忽略Pyre类型检查器相关文件
.pyre/

# 忽略pytype静态类型分析器相关文件
.pytype/

# 忽略Cython调试符号文件
cython_debug/

# 忽略通过`collectstatic`生成的Django应用程序的静态文件
media
static
